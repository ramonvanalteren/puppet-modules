# Maximum and minimum number of peers to connect to per torrent.
# min_peers = 40
max_peers = 10000

# Same as above but for seeding completed torrents (-1 = same as downloading)
# min_peers_seed = 10
# max_peers_seed = 50

# Maximum number of simultanious uploads per torrent.
max_uploads = 3000


# Global upload and download rate in KiB. "0" for unlimited.

# these rates de facto mean 0 (== unlimited), but they need to be set to nonzero value in order for throttles to work
# 1G is maximum (2^30), should be enough even for containership internal transfers 
# btw. that is 1GB/s (= 10gbit)
# This means that any throttle you define can not exceed the values here.
#
# Set a max of 500 mbit
download_rate = 50m
upload_rate = 50m

# up&down throttles 
# rtorrent has a weirdness that it internally multiplies with 1024
# Anything which has k attached becomes mbits due to this, which is confusing
# to say the least
# throttle_up = global_up, 1m
# throttle_down = global_down, 1m

# default group for peers outside of my rack
# Initializing this throttle to 1mbit per peer !!!!
throttle_up = outside, 1k
throttle_down = outside, 1k

# default group for peers inside of my rack
# Initializing this thrlottle to 50 mbit per peer !!!
throttle_up = inside, 50k
throttle_down = inside, 50k

# Default group, anyone should automagically fall into this group
# Setting this to 512 kbit per peer ! and assigning any ipaddress to the
# default group
throttle_up = default, 512
throttle_down = default, 512
throttle_ip = default, 10.0.0.0/8

# This will be overriden by per-transfer settings anyway, so for start some safe default:
directory = /tmp

# Default session directory. Make sure you don't run multiple instance
# We don;t use this, but set the session dir through the client
# session = /etc/p2p/

# logging:
handshake_log=yes

# The ip address reported to the tracker.
ip = <%= ipaddress_eth1 %>
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
bind = <%= ipaddress_eth1 %>
#bind = rakshasa.no

# Port range to use for listening. - again, set via puppet
#port_range = 10001-10001
port_range = <%= __rtorrent_port %>-<%= __rtorrent_port %>

# Start opening ports at a random position within the port range.
port_random = no

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
check_hash = no

# Set whetever the client should try to connect to UDP trackers.
use_udp_trackers = no

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
encryption = allow_incoming,enable_retry,prefer_plaintext

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
# 
dht = off

# UDP port to use for DHT. 
#
# dht_port = 10001

# Enable peer exchange (for torrents not marked private)
#
peer_exchange = no

#
# Do not modify the following parameters unless you know what you're doing.
#

# Hash read-ahead controls how many MB to request the kernel to read
# ahead. If the value is too low the disk may not be fully utilized,
# while if too high the kernel might not be able to keep the read
# pages in memory thus end up trashing.
hash_read_ahead = 15

# Interval between attempts to check the hash, in milliseconds.
hash_interval = 50


#scgi
scgi_port = :5001
# scgi_local = /etc/p2p/SCGI.socket


# Number of attempts to check the hash while using the mincore status,
# before forcing. Overworked systems might need lower values to get a
# decent hash checking rate.
#hash_max_tries = 10
